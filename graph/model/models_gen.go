// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Message struct {
	ID        string `json:"id" gorm:"primaryKey"`
	GmailID   string `json:"gmailId" gorm:"type:text"`
	ThreadID  string `json:"threadId" gorm:"type:text"`
	Subject   string `json:"subject" gorm:"type:text"`
	Body      string `json:"body" gorm:"type:text"`
	Sender    string `json:"sender" gorm:"type:text"`
	Timestamp string `json:"timestamp" gorm:"type:text"`
	IsStarred bool   `json:"isStarred" gorm:"type:boolean"`
}

type MessageFilterInput struct {
	IsStarred *bool   `json:"isStarred,omitempty"`
	Sender    *string `json:"sender,omitempty"`
}

type Mutation struct {
}

type PaginationInput struct {
	Limit  *int `json:"limit,omitempty"`
	Offset *int `json:"offset,omitempty"`
}

type Query struct {
}

type Label string

const (
	LabelStarred   Label = "STARRED"
	LabelUnread    Label = "UNREAD"
	LabelImportant Label = "IMPORTANT"
	LabelSpam      Label = "SPAM"
	LabelTrash     Label = "TRASH"
	LabelDraft     Label = "DRAFT"
	LabelSent      Label = "SENT"
	LabelInbox     Label = "INBOX"
	LabelOutbox    Label = "OUTBOX"
	LabelScheduled Label = "SCHEDULED"
)

var AllLabel = []Label{
	LabelStarred,
	LabelUnread,
	LabelImportant,
	LabelSpam,
	LabelTrash,
	LabelDraft,
	LabelSent,
	LabelInbox,
	LabelOutbox,
	LabelScheduled,
}

func (e Label) IsValid() bool {
	switch e {
	case LabelStarred, LabelUnread, LabelImportant, LabelSpam, LabelTrash, LabelDraft, LabelSent, LabelInbox, LabelOutbox, LabelScheduled:
		return true
	}
	return false
}

func (e Label) String() string {
	return string(e)
}

func (e *Label) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Label(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Label", str)
	}
	return nil
}

func (e Label) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
